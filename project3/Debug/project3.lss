
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002abc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00002abc  00002b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002154  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f67  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00005d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00005edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  000060ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00008701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  00009bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000aedc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000b3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ab 13 	call	0x2756	; 0x2756 <main>
      7a:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e8       	ldi	r26, 0x87	; 135
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e8       	ldi	r24, 0x87	; 135
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 e8       	ldi	r22, 0x87	; 135
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e1 57       	subi	r30, 0x71	; 113
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <DcMotor_Init>:
/* Description:
 * The Function responsible for setup the direction for the two motor
 * pins through the GPIO driver.
 */
void DcMotor_Init(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	/* setup the pin direction*/
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,1);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID,1);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID,1);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	63 e0       	ldi	r22, 0x03	; 3
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>

	/*stop the motor at the beginning*/
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,0);
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,0);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>

	/* Set the Enable bit*/
	GPIO_writePin(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID,1);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	63 e0       	ldi	r22, 0x03	; 3
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>

}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DcMotor_Rotate>:
/* Description:
 * The function responsible for rotate the DC Motor CW/ or
 * A-CW or stop the motor based on the state input state value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DcMotor_Rotate+0x6>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	6a 83       	std	Y+2, r22	; 0x02
	/* Choose the state if off or clockwise or anti-clockwise */
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,0);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID,1);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	41 e0       	ldi	r20, 0x01	; 1
     f42:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>

	/* set the speed */
	PWM_Timer0_Start( (speed*1.0 / 100) * 255);
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	aa 27       	eor	r26, r26
     f4e:	97 fd       	sbrc	r25, 7
     f50:	a0 95       	com	r26
     f52:	ba 2f       	mov	r27, r26
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	48 ec       	ldi	r20, 0xC8	; 200
     f6a:	52 e4       	ldi	r21, 0x42	; 66
     f6c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	53 e4       	ldi	r21, 0x43	; 67
     f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	0e 94 a5 14 	call	0x294a	; 0x294a <PWM_Timer0_Start>
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <ADC_init>:

/* Description :
 * initiate the ADC module
 */
void ADC_init(ADC_ConfigType *config)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <ADC_init+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
	/*channel Number and reference voltage */
	ADMUX = ( (config->ref_volt) << REFS0 );
     fb0:	a7 e2       	ldi	r26, 0x27	; 39
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e9 81       	ldd	r30, Y+1	; 0x01
     fb6:	fa 81       	ldd	r31, Y+2	; 0x02
     fb8:	80 81       	ld	r24, Z
     fba:	82 95       	swap	r24
     fbc:	88 0f       	add	r24, r24
     fbe:	88 0f       	add	r24, r24
     fc0:	80 7c       	andi	r24, 0xC0	; 192
     fc2:	8c 93       	st	X, r24

	/*Enable ADC , ADC interrupt is disabled*/
	ADCSRA = (1<<ADEN);
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 e8       	ldi	r24, 0x80	; 128
     fca:	80 83       	st	Z, r24

	/* Prescaler=128 so F(ADC)=125KHz*/
	ADCSRA |= (config->prescaler);
     fcc:	a6 e2       	ldi	r26, 0x26	; 38
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e6 e2       	ldi	r30, 0x26	; 38
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	90 81       	ld	r25, Z
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	81 81       	ldd	r24, Z+1	; 0x01
     fdc:	89 2b       	or	r24, r25
     fde:	8c 93       	st	X, r24

}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <ADC_readChannel>:

/* Description :
 * read the value at the channel ( The produced value of conversation )
 */
uint16 ADC_readChannel(uint8 channel_number)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
	/*insert channel_number to ADMUX*/
	ADMUX|=channel_number;
     ff6:	a7 e2       	ldi	r26, 0x27	; 39
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e7 e2       	ldi	r30, 0x27	; 39
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	89 2b       	or	r24, r25
    1004:	8c 93       	st	X, r24

	/*start conversation*/
	ADCSRA|=(1<<ADSC);
    1006:	a6 e2       	ldi	r26, 0x26	; 38
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e6 e2       	ldi	r30, 0x26	; 38
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 64       	ori	r24, 0x40	; 64
    1012:	8c 93       	st	X, r24

	/* polling : Looping till flag=1*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
    1014:	e6 e2       	ldi	r30, 0x26	; 38
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	80 71       	andi	r24, 0x10	; 16
    1020:	90 70       	andi	r25, 0x00	; 0
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	b9 f3       	breq	.-18     	; 0x1014 <ADC_readChannel+0x2a>

	/*Clear the flag*/
	SET_BIT(ADCSRA,ADIF);
    1026:	a6 e2       	ldi	r26, 0x26	; 38
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e6 e2       	ldi	r30, 0x26	; 38
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	8c 93       	st	X, r24

	/*return data*/
	return ADC;
    1034:	e4 e2       	ldi	r30, 0x24	; 36
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
}
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	27 97       	sbiw	r28, 0x07	; 7
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	6a 83       	std	Y+2, r22	; 0x02
    105c:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	08 f0       	brcs	.+2      	; 0x1066 <GPIO_setupPinDirection+0x22>
    1064:	d2 c0       	rjmp	.+420    	; 0x120a <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	09 f0       	breq	.+2      	; 0x106e <GPIO_setupPinDirection+0x2a>
    106c:	63 c0       	rjmp	.+198    	; 0x1134 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3f 83       	std	Y+7, r19	; 0x07
    1076:	2e 83       	std	Y+6, r18	; 0x06
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	e9 f0       	breq	.+58     	; 0x10bc <GPIO_setupPinDirection+0x78>
    1082:	2e 81       	ldd	r18, Y+6	; 0x06
    1084:	3f 81       	ldd	r19, Y+7	; 0x07
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	61 f1       	breq	.+88     	; 0x10e4 <GPIO_setupPinDirection+0xa0>
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	9f 81       	ldd	r25, Y+7	; 0x07
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	e1 f5       	brne	.+120    	; 0x110c <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
    1094:	aa e3       	ldi	r26, 0x3A	; 58
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ea e3       	ldi	r30, 0x3A	; 58
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <GPIO_setupPinDirection+0x6e>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <GPIO_setupPinDirection+0x6a>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	a7 c0       	rjmp	.+334    	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_setupPinDirection+0x96>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_setupPinDirection+0x92>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	93 c0       	rjmp	.+294    	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0xbe>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0xba>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	7f c0       	rjmp	.+254    	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
    110c:	a1 e3       	ldi	r26, 0x31	; 49
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0xe6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0xe2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6b c0       	rjmp	.+214    	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <GPIO_setupPinDirection+0xf8>
    113a:	67 c0       	rjmp	.+206    	; 0x120a <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	f9 f0       	breq	.+62     	; 0x118e <GPIO_setupPinDirection+0x14a>
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	79 f1       	breq	.+94     	; 0x11b8 <GPIO_setupPinDirection+0x174>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	09 f0       	breq	.+2      	; 0x1164 <GPIO_setupPinDirection+0x120>
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
    1164:	aa e3       	ldi	r26, 0x3A	; 58
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	ea e3       	ldi	r30, 0x3A	; 58
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x13e>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0x13a>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	3e c0       	rjmp	.+124    	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
    118e:	a7 e3       	ldi	r26, 0x37	; 55
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e7 e3       	ldi	r30, 0x37	; 55
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_setupPinDirection+0x168>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_setupPinDirection+0x164>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    11b8:	a4 e3       	ldi	r26, 0x34	; 52
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_setupPinDirection+0x192>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_setupPinDirection+0x18e>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    11e2:	a1 e3       	ldi	r26, 0x31	; 49
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_setupPinDirection+0x1bc>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_setupPinDirection+0x1b8>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    120a:	27 96       	adiw	r28, 0x07	; 7
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_setupPortDirection+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <GPIO_setupPortDirection+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	30 f5       	brcc	.+76     	; 0x127e <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	71 f0       	breq	.+28     	; 0x1262 <GPIO_setupPortDirection+0x46>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	71 f0       	breq	.+28     	; 0x126c <GPIO_setupPortDirection+0x50>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	79 f4       	brne	.+30     	; 0x1276 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    1258:	ea e3       	ldi	r30, 0x3A	; 58
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
    1260:	0e c0       	rjmp	.+28     	; 0x127e <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	09 c0       	rjmp	.+18     	; 0x127e <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	04 c0       	rjmp	.+8      	; 0x127e <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    1276:	e1 e3       	ldi	r30, 0x31	; 49
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
			break;
		}
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 direction)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	27 97       	sbiw	r28, 0x07	; 7
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
    12a4:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <GPIO_writePin+0x22>
    12ac:	d9 c0       	rjmp	.+434    	; 0x1460 <GPIO_writePin+0x1d4>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	21 f0       	breq	.+8      	; 0x12bc <GPIO_writePin+0x30>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 23       	and	r24, r24
    12b8:	09 f0       	breq	.+2      	; 0x12bc <GPIO_writePin+0x30>
    12ba:	d2 c0       	rjmp	.+420    	; 0x1460 <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <GPIO_writePin+0x38>
    12c2:	63 c0       	rjmp	.+198    	; 0x138a <GPIO_writePin+0xfe>
		{
			switch(port_num)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3f 83       	std	Y+7, r19	; 0x07
    12cc:	2e 83       	std	Y+6, r18	; 0x06
    12ce:	8e 81       	ldd	r24, Y+6	; 0x06
    12d0:	9f 81       	ldd	r25, Y+7	; 0x07
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	e9 f0       	breq	.+58     	; 0x1312 <GPIO_writePin+0x86>
    12d8:	2e 81       	ldd	r18, Y+6	; 0x06
    12da:	3f 81       	ldd	r19, Y+7	; 0x07
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	61 f1       	breq	.+88     	; 0x133a <GPIO_writePin+0xae>
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	e1 f5       	brne	.+120    	; 0x1362 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_writePin+0x7c>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_writePin+0x78>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	a7 c0       	rjmp	.+334    	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0xa4>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0xa0>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	93 c0       	rjmp	.+294    	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_writePin+0xcc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_writePin+0xc8>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	7f c0       	rjmp	.+254    	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <GPIO_writePin+0xf4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <GPIO_writePin+0xf0>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	6b c0       	rjmp	.+214    	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 23       	and	r24, r24
    138e:	09 f0       	breq	.+2      	; 0x1392 <GPIO_writePin+0x106>
    1390:	67 c0       	rjmp	.+206    	; 0x1460 <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3d 83       	std	Y+5, r19	; 0x05
    139a:	2c 83       	std	Y+4, r18	; 0x04
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	f9 f0       	breq	.+62     	; 0x13e4 <GPIO_writePin+0x158>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	79 f1       	breq	.+94     	; 0x140e <GPIO_writePin+0x182>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	09 f0       	breq	.+2      	; 0x13ba <GPIO_writePin+0x12e>
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    13ba:	ab e3       	ldi	r26, 0x3B	; 59
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0x14c>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0x148>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	3e c0       	rjmp	.+124    	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    13e4:	a8 e3       	ldi	r26, 0x38	; 56
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e8 e3       	ldi	r30, 0x38	; 56
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_writePin+0x176>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_writePin+0x172>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	29 c0       	rjmp	.+82     	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_writePin+0x1a0>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_writePin+0x19c>
    1430:	80 95       	com	r24
    1432:	84 23       	and	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_writePin+0x1ca>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_writePin+0x1c6>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1460:	27 96       	adiw	r28, 0x07	; 7
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,uint8 direction)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_writePort+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_writePort+0x8>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	30 f5       	brcc	.+76     	; 0x14d4 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3c 83       	std	Y+4, r19	; 0x04
    1490:	2b 83       	std	Y+3, r18	; 0x03
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	71 f0       	breq	.+28     	; 0x14b8 <GPIO_writePort+0x46>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	71 f0       	breq	.+28     	; 0x14c2 <GPIO_writePort+0x50>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	79 f4       	brne	.+30     	; 0x14cc <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	80 83       	st	Z, r24
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    14c2:	e5 e3       	ldi	r30, 0x35	; 53
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    14cc:	e2 e3       	ldi	r30, 0x32	; 50
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_readPin+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_readPin+0x8>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	10 f0       	brcs	.+4      	; 0x14fe <GPIO_readPin+0x1c>
	{
		return 0;
    14fa:	1d 82       	std	Y+5, r1	; 0x05
    14fc:	5f c0       	rjmp	.+190    	; 0x15bc <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3c 83       	std	Y+4, r19	; 0x04
    1506:	2b 83       	std	Y+3, r18	; 0x03
    1508:	4b 81       	ldd	r20, Y+3	; 0x03
    150a:	5c 81       	ldd	r21, Y+4	; 0x04
    150c:	41 30       	cpi	r20, 0x01	; 1
    150e:	51 05       	cpc	r21, r1
    1510:	e9 f0       	breq	.+58     	; 0x154c <GPIO_readPin+0x6a>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	59 f1       	breq	.+86     	; 0x1572 <GPIO_readPin+0x90>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	c9 f5       	brne	.+114    	; 0x1598 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1526:	e9 e3       	ldi	r30, 0x39	; 57
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_readPin+0x5c>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_readPin+0x58>
    1542:	ca 01       	movw	r24, r20
    1544:	58 2f       	mov	r21, r24
    1546:	51 70       	andi	r21, 0x01	; 1
    1548:	5d 83       	std	Y+5, r21	; 0x05
    154a:	38 c0       	rjmp	.+112    	; 0x15bc <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    154c:	e6 e3       	ldi	r30, 0x36	; 54
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_readPin+0x82>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_readPin+0x7e>
    1568:	ca 01       	movw	r24, r20
    156a:	58 2f       	mov	r21, r24
    156c:	51 70       	andi	r21, 0x01	; 1
    156e:	5d 83       	std	Y+5, r21	; 0x05
    1570:	25 c0       	rjmp	.+74     	; 0x15bc <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1572:	e3 e3       	ldi	r30, 0x33	; 51
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_readPin+0xa8>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_readPin+0xa4>
    158e:	ca 01       	movw	r24, r20
    1590:	58 2f       	mov	r21, r24
    1592:	51 70       	andi	r21, 0x01	; 1
    1594:	5d 83       	std	Y+5, r21	; 0x05
    1596:	12 c0       	rjmp	.+36     	; 0x15bc <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    1598:	e0 e3       	ldi	r30, 0x30	; 48
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_readPin+0xce>
    15ac:	55 95       	asr	r21
    15ae:	47 95       	ror	r20
    15b0:	8a 95       	dec	r24
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_readPin+0xca>
    15b4:	ca 01       	movw	r24, r20
    15b6:	58 2f       	mov	r21, r24
    15b8:	51 70       	andi	r21, 0x01	; 1
    15ba:	5d 83       	std	Y+5, r21	; 0x05
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <GPIO_readPort+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <GPIO_readPort+0x8>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	10 f0       	brcs	.+4      	; 0x15e6 <GPIO_readPort+0x18>
	{
		return 0;
    15e2:	1c 82       	std	Y+4, r1	; 0x04
    15e4:	26 c0       	rjmp	.+76     	; 0x1632 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3b 83       	std	Y+3, r19	; 0x03
    15ee:	2a 83       	std	Y+2, r18	; 0x02
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	9b 81       	ldd	r25, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	71 f0       	breq	.+28     	; 0x1616 <GPIO_readPort+0x48>
    15fa:	2a 81       	ldd	r18, Y+2	; 0x02
    15fc:	3b 81       	ldd	r19, Y+3	; 0x03
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	71 f0       	breq	.+28     	; 0x1620 <GPIO_readPort+0x52>
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	79 f4       	brne	.+30     	; 0x162a <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	90 81       	ld	r25, Z
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    1616:	e6 e3       	ldi	r30, 0x36	; 54
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	20 81       	ld	r18, Z
    161c:	2c 83       	std	Y+4, r18	; 0x04
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    1620:	e3 e3       	ldi	r30, 0x33	; 51
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	30 81       	ld	r19, Z
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <GPIO_readPort+0x64>
		default:
			return PINC;
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	6c 97       	sbiw	r28, 0x1c	; 28
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	62 e0       	ldi	r22, 0x02	; 2
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 ea       	ldi	r26, 0xA0	; 160
    1670:	b1 e4       	ldi	r27, 0x41	; 65
    1672:	89 8f       	std	Y+25, r24	; 0x19
    1674:	9a 8f       	std	Y+26, r25	; 0x1a
    1676:	ab 8f       	std	Y+27, r26	; 0x1b
    1678:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	69 8d       	ldd	r22, Y+25	; 0x19
    167c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    167e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	53 e4       	ldi	r21, 0x43	; 67
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8d 8b       	std	Y+21, r24	; 0x15
    1694:	9e 8b       	std	Y+22, r25	; 0x16
    1696:	af 8b       	std	Y+23, r26	; 0x17
    1698:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169a:	6d 89       	ldd	r22, Y+21	; 0x15
    169c:	7e 89       	ldd	r23, Y+22	; 0x16
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <LCD_init+0x7a>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <LCD_init+0xf8>
	else if (__tmp > 65535)
    16bc:	6d 89       	ldd	r22, Y+21	; 0x15
    16be:	7e 89       	ldd	r23, Y+22	; 0x16
    16c0:	8f 89       	ldd	r24, Y+23	; 0x17
    16c2:	98 8d       	ldd	r25, Y+24	; 0x18
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	69 8d       	ldd	r22, Y+25	; 0x19
    16d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9c 8b       	std	Y+20, r25	; 0x14
    16fa:	8b 8b       	std	Y+19, r24	; 0x13
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <LCD_init+0xda>
    16fe:	89 e1       	ldi	r24, 0x19	; 25
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9a 8b       	std	Y+18, r25	; 0x12
    1704:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1706:	89 89       	ldd	r24, Y+17	; 0x11
    1708:	9a 89       	ldd	r25, Y+18	; 0x12
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_init+0xc8>
    170e:	9a 8b       	std	Y+18, r25	; 0x12
    1710:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8b 89       	ldd	r24, Y+19	; 0x13
    1714:	9c 89       	ldd	r25, Y+20	; 0x14
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	9c 89       	ldd	r25, Y+20	; 0x14
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <LCD_init+0xbc>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6d 89       	ldd	r22, Y+21	; 0x15
    1728:	7e 89       	ldd	r23, Y+22	; 0x16
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9c 8b       	std	Y+20, r25	; 0x14
    1738:	8b 8b       	std	Y+19, r24	; 0x13
    173a:	8b 89       	ldd	r24, Y+19	; 0x13
    173c:	9c 89       	ldd	r25, Y+20	; 0x14
    173e:	98 8b       	std	Y+16, r25	; 0x10
    1740:	8f 87       	std	Y+15, r24	; 0x0f
    1742:	8f 85       	ldd	r24, Y+15	; 0x0f
    1744:	98 89       	ldd	r25, Y+16	; 0x10
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_init+0x104>
    174a:	98 8b       	std	Y+16, r25	; 0x10
    174c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

#if(LCD_BIT_MODE == 8)
	/* 2 - Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	6f ef       	ldi	r22, 0xFF	; 255
    1752:	0e 94 0e 09 	call	0x121c	; 0x121c <GPIO_setupPortDirection>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 ea       	ldi	r26, 0xA0	; 160
    175c:	b1 e4       	ldi	r27, 0x41	; 65
    175e:	8b 87       	std	Y+11, r24	; 0x0b
    1760:	9c 87       	std	Y+12, r25	; 0x0c
    1762:	ad 87       	std	Y+13, r26	; 0x0d
    1764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	6b 85       	ldd	r22, Y+11	; 0x0b
    1768:	7c 85       	ldd	r23, Y+12	; 0x0c
    176a:	8d 85       	ldd	r24, Y+13	; 0x0d
    176c:	9e 85       	ldd	r25, Y+14	; 0x0e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	53 e4       	ldi	r21, 0x43	; 67
    1776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8f 83       	std	Y+7, r24	; 0x07
    1780:	98 87       	std	Y+8, r25	; 0x08
    1782:	a9 87       	std	Y+9, r26	; 0x09
    1784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <LCD_init+0x166>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <LCD_init+0x1e4>
	else if (__tmp > 65535)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <LCD_init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <LCD_init+0x1c6>
    17ea:	89 e1       	ldi	r24, 0x19	; 25
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_init+0x1b4>
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <LCD_init+0x1a8>
    1810:	14 c0       	rjmp	.+40     	; 0x183a <LCD_init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_init+0x1f0>
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 4 - send command 2 lines 8 bits*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    183a:	88 e3       	ldi	r24, 0x38	; 56
    183c:	0e 94 2f 0c 	call	0x185e	; 0x185e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    1840:	8c e0       	ldi	r24, 0x0C	; 12
    1842:	0e 94 2f 0c 	call	0x185e	; 0x185e <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	0e 94 2f 0c 	call	0x185e	; 0x185e <LCD_sendCommand>
}
    184c:	6c 96       	adiw	r28, 0x1c	; 28
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	c1 56       	subi	r28, 0x61	; 97
    186c:	d0 40       	sbci	r29, 0x00	; 0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	fe 01       	movw	r30, r28
    187a:	ef 59       	subi	r30, 0x9F	; 159
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    188a:	fe 01       	movw	r30, r28
    188c:	e3 5a       	subi	r30, 0xA3	; 163
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e8       	ldi	r26, 0x80	; 128
    1896:	bf e3       	ldi	r27, 0x3F	; 63
    1898:	80 83       	st	Z, r24
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	a2 83       	std	Z+2, r26	; 0x02
    189e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18a0:	8e 01       	movw	r16, r28
    18a2:	07 5a       	subi	r16, 0xA7	; 167
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	fe 01       	movw	r30, r28
    18a8:	e3 5a       	subi	r30, 0xA3	; 163
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	2b ea       	ldi	r18, 0xAB	; 171
    18b6:	3a ea       	ldi	r19, 0xAA	; 170
    18b8:	4a ea       	ldi	r20, 0xAA	; 170
    18ba:	5e e3       	ldi	r21, 0x3E	; 62
    18bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ce:	fe 01       	movw	r30, r28
    18d0:	e7 5a       	subi	r30, 0xA7	; 167
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	34 f4       	brge	.+12     	; 0x18f8 <LCD_sendCommand+0x9a>
		__ticks = 1;
    18ec:	fe 01       	movw	r30, r28
    18ee:	e8 5a       	subi	r30, 0xA8	; 168
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 83       	st	Z, r24
    18f6:	e0 c0       	rjmp	.+448    	; 0x1ab8 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 5a       	subi	r30, 0xA7	; 167
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	53 e4       	ldi	r21, 0x43	; 67
    190e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	0c f0       	brlt	.+2      	; 0x1918 <LCD_sendCommand+0xba>
    1916:	c0 c0       	rjmp	.+384    	; 0x1a98 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1918:	fe 01       	movw	r30, r28
    191a:	e3 5a       	subi	r30, 0xA3	; 163
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	60 81       	ld	r22, Z
    1920:	71 81       	ldd	r23, Z+1	; 0x01
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4a e7       	ldi	r20, 0x7A	; 122
    192c:	54 e4       	ldi	r21, 0x44	; 68
    192e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	fe 01       	movw	r30, r28
    1938:	ec 5a       	subi	r30, 0xAC	; 172
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	8e 01       	movw	r16, r28
    1946:	00 5b       	subi	r16, 0xB0	; 176
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	ec 5a       	subi	r30, 0xAC	; 172
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	53 e4       	ldi	r21, 0x43	; 67
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	f8 01       	movw	r30, r16
    196a:	80 83       	st	Z, r24
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	a2 83       	std	Z+2, r26	; 0x02
    1970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1972:	fe 01       	movw	r30, r28
    1974:	e0 5b       	subi	r30, 0xB0	; 176
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	44 f4       	brge	.+16     	; 0x19a0 <LCD_sendCommand+0x142>
		__ticks = 1;
    1990:	fe 01       	movw	r30, r28
    1992:	e2 5b       	subi	r30, 0xB2	; 178
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	64 c0       	rjmp	.+200    	; 0x1a68 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    19a0:	fe 01       	movw	r30, r28
    19a2:	e0 5b       	subi	r30, 0xB0	; 176
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	3f ef       	ldi	r19, 0xFF	; 255
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	57 e4       	ldi	r21, 0x47	; 71
    19b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	0c f0       	brlt	.+2      	; 0x19c0 <LCD_sendCommand+0x162>
    19be:	43 c0       	rjmp	.+134    	; 0x1a46 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	fe 01       	movw	r30, r28
    19c2:	ec 5a       	subi	r30, 0xAC	; 172
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8e 01       	movw	r16, r28
    19e0:	02 5b       	subi	r16, 0xB2	; 178
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	f8 01       	movw	r30, r16
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	1f c0       	rjmp	.+62     	; 0x1a36 <LCD_sendCommand+0x1d8>
    19f8:	fe 01       	movw	r30, r28
    19fa:	e4 5b       	subi	r30, 0xB4	; 180
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	89 e1       	ldi	r24, 0x19	; 25
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	fe 01       	movw	r30, r28
    1a08:	e4 5b       	subi	r30, 0xB4	; 180
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_sendCommand+0x1b2>
    1a14:	fe 01       	movw	r30, r28
    1a16:	e4 5b       	subi	r30, 0xB4	; 180
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	de 01       	movw	r26, r28
    1a20:	a2 5b       	subi	r26, 0xB2	; 178
    1a22:	bf 4f       	sbci	r27, 0xFF	; 255
    1a24:	fe 01       	movw	r30, r28
    1a26:	e2 5b       	subi	r30, 0xB2	; 178
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	11 96       	adiw	r26, 0x01	; 1
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	fe 01       	movw	r30, r28
    1a38:	e2 5b       	subi	r30, 0xB2	; 178
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	d1 f6       	brne	.-76     	; 0x19f8 <LCD_sendCommand+0x19a>
    1a44:	4b c0       	rjmp	.+150    	; 0x1adc <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	8e 01       	movw	r16, r28
    1a48:	02 5b       	subi	r16, 0xB2	; 178
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e0 5b       	subi	r30, 0xB0	; 176
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 81       	ld	r22, Z
    1a54:	71 81       	ldd	r23, Z+1	; 0x01
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	93 81       	ldd	r25, Z+3	; 0x03
    1a5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	f8 01       	movw	r30, r16
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    1a68:	de 01       	movw	r26, r28
    1a6a:	a6 5b       	subi	r26, 0xB6	; 182
    1a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e2 5b       	subi	r30, 0xB2	; 178
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e6 5b       	subi	r30, 0xB6	; 182
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_sendCommand+0x22a>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e6 5b       	subi	r30, 0xB6	; 182
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	22 c0       	rjmp	.+68     	; 0x1adc <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	08 5a       	subi	r16, 0xA8	; 168
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e7 5a       	subi	r30, 0xA7	; 167
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	80 83       	st	Z, r24
    1ab8:	de 01       	movw	r26, r28
    1aba:	a7 5b       	subi	r26, 0xB7	; 183
    1abc:	bf 4f       	sbci	r27, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e8 5a       	subi	r30, 0xA8	; 168
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e7 5b       	subi	r30, 0xB7	; 183
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	8a 95       	dec	r24
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_sendCommand+0x272>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e7 5b       	subi	r30, 0xB7	; 183
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	62 e0       	ldi	r22, 0x02	; 2
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	eb 5b       	subi	r30, 0xBB	; 187
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e8       	ldi	r26, 0x80	; 128
    1af2:	bf e3       	ldi	r27, 0x3F	; 63
    1af4:	80 83       	st	Z, r24
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	a2 83       	std	Z+2, r26	; 0x02
    1afa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1afc:	8e 01       	movw	r16, r28
    1afe:	0f 5b       	subi	r16, 0xBF	; 191
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	fe 01       	movw	r30, r28
    1b04:	eb 5b       	subi	r30, 0xBB	; 187
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	2b ea       	ldi	r18, 0xAB	; 171
    1b12:	3a ea       	ldi	r19, 0xAA	; 170
    1b14:	4a ea       	ldi	r20, 0xAA	; 170
    1b16:	5e e3       	ldi	r21, 0x3E	; 62
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	f8 01       	movw	r30, r16
    1b22:	80 83       	st	Z, r24
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	a2 83       	std	Z+2, r26	; 0x02
    1b28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 5b       	subi	r30, 0xBF	; 191
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	34 f4       	brge	.+12     	; 0x1b54 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e0 5c       	subi	r30, 0xC0	; 192
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 83       	st	Z, r24
    1b52:	9d c0       	rjmp	.+314    	; 0x1c8e <LCD_sendCommand+0x430>
	else if (__tmp > 255)
    1b54:	fe 01       	movw	r30, r28
    1b56:	ef 5b       	subi	r30, 0xBF	; 191
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	53 e4       	ldi	r21, 0x43	; 67
    1b6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <LCD_sendCommand+0x316>
    1b72:	7e c0       	rjmp	.+252    	; 0x1c70 <LCD_sendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    1b74:	fe 01       	movw	r30, r28
    1b76:	eb 5b       	subi	r30, 0xBB	; 187
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a e7       	ldi	r20, 0x7A	; 122
    1b88:	54 e4       	ldi	r21, 0x44	; 68
    1b8a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	8c af       	std	Y+60, r24	; 0x3c
    1b94:	9d af       	std	Y+61, r25	; 0x3d
    1b96:	ae af       	std	Y+62, r26	; 0x3e
    1b98:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b9c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ba0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	53 e4       	ldi	r21, 0x43	; 67
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	88 af       	std	Y+56, r24	; 0x38
    1bb4:	99 af       	std	Y+57, r25	; 0x39
    1bb6:	aa af       	std	Y+58, r26	; 0x3a
    1bb8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1bba:	68 ad       	ldd	r22, Y+56	; 0x38
    1bbc:	79 ad       	ldd	r23, Y+57	; 0x39
    1bbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_sendCommand+0x37e>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9f ab       	std	Y+55, r25	; 0x37
    1bd8:	8e ab       	std	Y+54, r24	; 0x36
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_sendCommand+0x3fc>
	else if (__tmp > 65535)
    1bdc:	68 ad       	ldd	r22, Y+56	; 0x38
    1bde:	79 ad       	ldd	r23, Y+57	; 0x39
    1be0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1be2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_sendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bf6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bf8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bfa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9f ab       	std	Y+55, r25	; 0x37
    1c1a:	8e ab       	std	Y+54, r24	; 0x36
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_sendCommand+0x3de>
    1c1e:	89 e1       	ldi	r24, 0x19	; 25
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9d ab       	std	Y+53, r25	; 0x35
    1c24:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c26:	8c a9       	ldd	r24, Y+52	; 0x34
    1c28:	9d a9       	ldd	r25, Y+53	; 0x35
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_sendCommand+0x3cc>
    1c2e:	9d ab       	std	Y+53, r25	; 0x35
    1c30:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8e a9       	ldd	r24, Y+54	; 0x36
    1c34:	9f a9       	ldd	r25, Y+55	; 0x37
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9f ab       	std	Y+55, r25	; 0x37
    1c3a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c3e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_sendCommand+0x3c0>
    1c44:	2d c0       	rjmp	.+90     	; 0x1ca0 <LCD_sendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	68 ad       	ldd	r22, Y+56	; 0x38
    1c48:	79 ad       	ldd	r23, Y+57	; 0x39
    1c4a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c4c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9f ab       	std	Y+55, r25	; 0x37
    1c58:	8e ab       	std	Y+54, r24	; 0x36
    1c5a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c5c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c5e:	9b ab       	std	Y+51, r25	; 0x33
    1c60:	8a ab       	std	Y+50, r24	; 0x32
    1c62:	8a a9       	ldd	r24, Y+50	; 0x32
    1c64:	9b a9       	ldd	r25, Y+51	; 0x33
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_sendCommand+0x408>
    1c6a:	9b ab       	std	Y+51, r25	; 0x33
    1c6c:	8a ab       	std	Y+50, r24	; 0x32
    1c6e:	18 c0       	rjmp	.+48     	; 0x1ca0 <LCD_sendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c70:	fe 01       	movw	r30, r28
    1c72:	ef 5b       	subi	r30, 0xBF	; 191
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	fe 01       	movw	r30, r28
    1c88:	e0 5c       	subi	r30, 0xC0	; 192
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 83       	st	Z, r24
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e0 5c       	subi	r30, 0xC0	; 192
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c98:	89 a9       	ldd	r24, Y+49	; 0x31
    1c9a:	8a 95       	dec	r24
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_sendCommand+0x43c>
    1c9e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ef 59       	subi	r30, 0x9F	; 159
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	60 81       	ld	r22, Z
    1caa:	0e 94 39 0a 	call	0x1472	; 0x1472 <GPIO_writePort>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e8       	ldi	r26, 0x80	; 128
    1cb4:	bf e3       	ldi	r27, 0x3F	; 63
    1cb6:	8d a7       	std	Y+45, r24	; 0x2d
    1cb8:	9e a7       	std	Y+46, r25	; 0x2e
    1cba:	af a7       	std	Y+47, r26	; 0x2f
    1cbc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cbe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cc0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc6:	2b ea       	ldi	r18, 0xAB	; 171
    1cc8:	3a ea       	ldi	r19, 0xAA	; 170
    1cca:	4a ea       	ldi	r20, 0xAA	; 170
    1ccc:	5e e3       	ldi	r21, 0x3E	; 62
    1cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	89 a7       	std	Y+41, r24	; 0x29
    1cd8:	9a a7       	std	Y+42, r25	; 0x2a
    1cda:	ab a7       	std	Y+43, r26	; 0x2b
    1cdc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1cde:	69 a5       	ldd	r22, Y+41	; 0x29
    1ce0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ce2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	1c f4       	brge	.+6      	; 0x1cfc <LCD_sendCommand+0x49e>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	88 a7       	std	Y+40, r24	; 0x28
    1cfa:	91 c0       	rjmp	.+290    	; 0x1e1e <LCD_sendCommand+0x5c0>
	else if (__tmp > 255)
    1cfc:	69 a5       	ldd	r22, Y+41	; 0x29
    1cfe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	53 e4       	ldi	r21, 0x43	; 67
    1d0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	0c f0       	brlt	.+2      	; 0x1d16 <LCD_sendCommand+0x4b8>
    1d14:	7b c0       	rjmp	.+246    	; 0x1e0c <LCD_sendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    1d16:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d18:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a e7       	ldi	r20, 0x7A	; 122
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8c a3       	std	Y+36, r24	; 0x24
    1d30:	9d a3       	std	Y+37, r25	; 0x25
    1d32:	ae a3       	std	Y+38, r26	; 0x26
    1d34:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6c a1       	ldd	r22, Y+36	; 0x24
    1d38:	7d a1       	ldd	r23, Y+37	; 0x25
    1d3a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d3c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a e7       	ldi	r20, 0x7A	; 122
    1d44:	53 e4       	ldi	r21, 0x43	; 67
    1d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	88 a3       	std	Y+32, r24	; 0x20
    1d50:	99 a3       	std	Y+33, r25	; 0x21
    1d52:	aa a3       	std	Y+34, r26	; 0x22
    1d54:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d56:	68 a1       	ldd	r22, Y+32	; 0x20
    1d58:	79 a1       	ldd	r23, Y+33	; 0x21
    1d5a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d5c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_sendCommand+0x51a>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9f 8f       	std	Y+31, r25	; 0x1f
    1d74:	8e 8f       	std	Y+30, r24	; 0x1e
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCD_sendCommand+0x598>
	else if (__tmp > 65535)
    1d78:	68 a1       	ldd	r22, Y+32	; 0x20
    1d7a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d7c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d7e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCD_sendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6c a1       	ldd	r22, Y+36	; 0x24
    1d92:	7d a1       	ldd	r23, Y+37	; 0x25
    1d94:	8e a1       	ldd	r24, Y+38	; 0x26
    1d96:	9f a1       	ldd	r25, Y+39	; 0x27
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9f 8f       	std	Y+31, r25	; 0x1f
    1db6:	8e 8f       	std	Y+30, r24	; 0x1e
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCD_sendCommand+0x57a>
    1dba:	89 e1       	ldi	r24, 0x19	; 25
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9d 8f       	std	Y+29, r25	; 0x1d
    1dc0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dc4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_sendCommand+0x568>
    1dca:	9d 8f       	std	Y+29, r25	; 0x1d
    1dcc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	9f 8f       	std	Y+31, r25	; 0x1f
    1dd6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCD_sendCommand+0x55c>
    1de0:	24 c0       	rjmp	.+72     	; 0x1e2a <LCD_sendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	68 a1       	ldd	r22, Y+32	; 0x20
    1de4:	79 a1       	ldd	r23, Y+33	; 0x21
    1de6:	8a a1       	ldd	r24, Y+34	; 0x22
    1de8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9f 8f       	std	Y+31, r25	; 0x1f
    1df4:	8e 8f       	std	Y+30, r24	; 0x1e
    1df6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dfa:	9b 8f       	std	Y+27, r25	; 0x1b
    1dfc:	8a 8f       	std	Y+26, r24	; 0x1a
    1dfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x5a4>
    1e06:	9b 8f       	std	Y+27, r25	; 0x1b
    1e08:	8a 8f       	std	Y+26, r24	; 0x1a
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_sendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e0c:	69 a5       	ldd	r22, Y+41	; 0x29
    1e0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	88 a7       	std	Y+40, r24	; 0x28
    1e1e:	88 a5       	ldd	r24, Y+40	; 0x28
    1e20:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e22:	89 8d       	ldd	r24, Y+25	; 0x19
    1e24:	8a 95       	dec	r24
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x5c6>
    1e28:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e8       	ldi	r26, 0x80	; 128
    1e3a:	bf e3       	ldi	r27, 0x3F	; 63
    1e3c:	8d 8b       	std	Y+21, r24	; 0x15
    1e3e:	9e 8b       	std	Y+22, r25	; 0x16
    1e40:	af 8b       	std	Y+23, r26	; 0x17
    1e42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e44:	6d 89       	ldd	r22, Y+21	; 0x15
    1e46:	7e 89       	ldd	r23, Y+22	; 0x16
    1e48:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4c:	2b ea       	ldi	r18, 0xAB	; 171
    1e4e:	3a ea       	ldi	r19, 0xAA	; 170
    1e50:	4a ea       	ldi	r20, 0xAA	; 170
    1e52:	5e e3       	ldi	r21, 0x3E	; 62
    1e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	89 8b       	std	Y+17, r24	; 0x11
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	ab 8b       	std	Y+19, r26	; 0x13
    1e62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e64:	69 89       	ldd	r22, Y+17	; 0x11
    1e66:	7a 89       	ldd	r23, Y+18	; 0x12
    1e68:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e8       	ldi	r20, 0x80	; 128
    1e72:	5f e3       	ldi	r21, 0x3F	; 63
    1e74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	1c f4       	brge	.+6      	; 0x1e82 <LCD_sendCommand+0x624>
		__ticks = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	88 8b       	std	Y+16, r24	; 0x10
    1e80:	91 c0       	rjmp	.+290    	; 0x1fa4 <LCD_sendCommand+0x746>
	else if (__tmp > 255)
    1e82:	69 89       	ldd	r22, Y+17	; 0x11
    1e84:	7a 89       	ldd	r23, Y+18	; 0x12
    1e86:	8b 89       	ldd	r24, Y+19	; 0x13
    1e88:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	53 e4       	ldi	r21, 0x43	; 67
    1e92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	0c f0       	brlt	.+2      	; 0x1e9c <LCD_sendCommand+0x63e>
    1e9a:	7b c0       	rjmp	.+246    	; 0x1f92 <LCD_sendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    1e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a e7       	ldi	r20, 0x7A	; 122
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8c 87       	std	Y+12, r24	; 0x0c
    1eb6:	9d 87       	std	Y+13, r25	; 0x0d
    1eb8:	ae 87       	std	Y+14, r26	; 0x0e
    1eba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ebe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	53 e4       	ldi	r21, 0x43	; 67
    1ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	88 87       	std	Y+8, r24	; 0x08
    1ed6:	99 87       	std	Y+9, r25	; 0x09
    1ed8:	aa 87       	std	Y+10, r26	; 0x0a
    1eda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1edc:	68 85       	ldd	r22, Y+8	; 0x08
    1ede:	79 85       	ldd	r23, Y+9	; 0x09
    1ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_sendCommand+0x6a0>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9f 83       	std	Y+7, r25	; 0x07
    1efa:	8e 83       	std	Y+6, r24	; 0x06
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_sendCommand+0x71e>
	else if (__tmp > 65535)
    1efe:	68 85       	ldd	r22, Y+8	; 0x08
    1f00:	79 85       	ldd	r23, Y+9	; 0x09
    1f02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_sendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9f 83       	std	Y+7, r25	; 0x07
    1f3c:	8e 83       	std	Y+6, r24	; 0x06
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_sendCommand+0x700>
    1f40:	89 e1       	ldi	r24, 0x19	; 25
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9d 83       	std	Y+5, r25	; 0x05
    1f46:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_sendCommand+0x6ee>
    1f50:	9d 83       	std	Y+5, r25	; 0x05
    1f52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8e 81       	ldd	r24, Y+6	; 0x06
    1f56:	9f 81       	ldd	r25, Y+7	; 0x07
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9f 83       	std	Y+7, r25	; 0x07
    1f5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f60:	9f 81       	ldd	r25, Y+7	; 0x07
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_sendCommand+0x6e2>
    1f66:	24 c0       	rjmp	.+72     	; 0x1fb0 <LCD_sendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	68 85       	ldd	r22, Y+8	; 0x08
    1f6a:	79 85       	ldd	r23, Y+9	; 0x09
    1f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9f 83       	std	Y+7, r25	; 0x07
    1f7a:	8e 83       	std	Y+6, r24	; 0x06
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_sendCommand+0x72a>
    1f8c:	9b 83       	std	Y+3, r25	; 0x03
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_sendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f92:	69 89       	ldd	r22, Y+17	; 0x11
    1f94:	7a 89       	ldd	r23, Y+18	; 0x12
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	88 8b       	std	Y+16, r24	; 0x10
    1fa4:	88 89       	ldd	r24, Y+16	; 0x10
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	8a 95       	dec	r24
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_sendCommand+0x74c>
    1fae:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    1fb0:	cf 59       	subi	r28, 0x9F	; 159
    1fb2:	df 4f       	sbci	r29, 0xFF	; 255
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	cd 54       	subi	r28, 0x4D	; 77
    1fd6:	d0 40       	sbci	r29, 0x00	; 0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e3 5b       	subi	r30, 0xB3	; 179
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5b       	subi	r30, 0xB7	; 183
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	8e 01       	movw	r16, r28
    200c:	0b 5b       	subi	r16, 0xBB	; 187
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	e7 5b       	subi	r30, 0xB7	; 183
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	53 e4       	ldi	r21, 0x43	; 67
    2026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	f8 01       	movw	r30, r16
    2030:	80 83       	st	Z, r24
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	a2 83       	std	Z+2, r26	; 0x02
    2036:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2038:	fe 01       	movw	r30, r28
    203a:	eb 5b       	subi	r30, 0xBB	; 187
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	44 f4       	brge	.+16     	; 0x2066 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2056:	fe 01       	movw	r30, r28
    2058:	ed 5b       	subi	r30, 0xBD	; 189
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	64 c0       	rjmp	.+200    	; 0x212e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2066:	fe 01       	movw	r30, r28
    2068:	eb 5b       	subi	r30, 0xBB	; 187
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    2078:	4f e7       	ldi	r20, 0x7F	; 127
    207a:	57 e4       	ldi	r21, 0x47	; 71
    207c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2080:	18 16       	cp	r1, r24
    2082:	0c f0       	brlt	.+2      	; 0x2086 <LCD_displayCharacter+0xbe>
    2084:	43 c0       	rjmp	.+134    	; 0x210c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	fe 01       	movw	r30, r28
    2088:	e7 5b       	subi	r30, 0xB7	; 183
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	8e 01       	movw	r16, r28
    20a6:	0d 5b       	subi	r16, 0xBD	; 189
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	f8 01       	movw	r30, r16
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	1f c0       	rjmp	.+62     	; 0x20fc <LCD_displayCharacter+0x134>
    20be:	fe 01       	movw	r30, r28
    20c0:	ef 5b       	subi	r30, 0xBF	; 191
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	89 e1       	ldi	r24, 0x19	; 25
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20cc:	fe 01       	movw	r30, r28
    20ce:	ef 5b       	subi	r30, 0xBF	; 191
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_displayCharacter+0x10e>
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 5b       	subi	r30, 0xBF	; 191
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	de 01       	movw	r26, r28
    20e6:	ad 5b       	subi	r26, 0xBD	; 189
    20e8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 5b       	subi	r30, 0xBD	; 189
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	9c 93       	st	X, r25
    20fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 5b       	subi	r30, 0xBD	; 189
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	91 81       	ldd	r25, Z+1	; 0x01
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	d1 f6       	brne	.-76     	; 0x20be <LCD_displayCharacter+0xf6>
    210a:	24 c0       	rjmp	.+72     	; 0x2154 <LCD_displayCharacter+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	8e 01       	movw	r16, r28
    210e:	0d 5b       	subi	r16, 0xBD	; 189
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	fe 01       	movw	r30, r28
    2114:	eb 5b       	subi	r30, 0xBB	; 187
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	f8 01       	movw	r30, r16
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	80 83       	st	Z, r24
    212e:	fe 01       	movw	r30, r28
    2130:	ed 5b       	subi	r30, 0xBD	; 189
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	fe 01       	movw	r30, r28
    213a:	ff 96       	adiw	r30, 0x3f	; 63
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	fe 01       	movw	r30, r28
    2142:	ff 96       	adiw	r30, 0x3f	; 63
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_displayCharacter+0x180>
    214c:	fe 01       	movw	r30, r28
    214e:	ff 96       	adiw	r30, 0x3f	; 63
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	62 e0       	ldi	r22, 0x02	; 2
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e8       	ldi	r26, 0x80	; 128
    2164:	bf e3       	ldi	r27, 0x3F	; 63
    2166:	8b af       	std	Y+59, r24	; 0x3b
    2168:	9c af       	std	Y+60, r25	; 0x3c
    216a:	ad af       	std	Y+61, r26	; 0x3d
    216c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2170:	7c ad       	ldd	r23, Y+60	; 0x3c
    2172:	8d ad       	ldd	r24, Y+61	; 0x3d
    2174:	9e ad       	ldd	r25, Y+62	; 0x3e
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	53 e4       	ldi	r21, 0x43	; 67
    217e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8f ab       	std	Y+55, r24	; 0x37
    2188:	98 af       	std	Y+56, r25	; 0x38
    218a:	a9 af       	std	Y+57, r26	; 0x39
    218c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    218e:	6f a9       	ldd	r22, Y+55	; 0x37
    2190:	78 ad       	ldd	r23, Y+56	; 0x38
    2192:	89 ad       	ldd	r24, Y+57	; 0x39
    2194:	9a ad       	ldd	r25, Y+58	; 0x3a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <LCD_displayCharacter+0x1e8>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9e ab       	std	Y+54, r25	; 0x36
    21ac:	8d ab       	std	Y+53, r24	; 0x35
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <LCD_displayCharacter+0x266>
	else if (__tmp > 65535)
    21b0:	6f a9       	ldd	r22, Y+55	; 0x37
    21b2:	78 ad       	ldd	r23, Y+56	; 0x38
    21b4:	89 ad       	ldd	r24, Y+57	; 0x39
    21b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <LCD_displayCharacter+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6b ad       	ldd	r22, Y+59	; 0x3b
    21ca:	7c ad       	ldd	r23, Y+60	; 0x3c
    21cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9e ab       	std	Y+54, r25	; 0x36
    21ee:	8d ab       	std	Y+53, r24	; 0x35
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <LCD_displayCharacter+0x248>
    21f2:	89 e1       	ldi	r24, 0x19	; 25
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9c ab       	std	Y+52, r25	; 0x34
    21f8:	8b ab       	std	Y+51, r24	; 0x33
    21fa:	8b a9       	ldd	r24, Y+51	; 0x33
    21fc:	9c a9       	ldd	r25, Y+52	; 0x34
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_displayCharacter+0x236>
    2202:	9c ab       	std	Y+52, r25	; 0x34
    2204:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	8d a9       	ldd	r24, Y+53	; 0x35
    2208:	9e a9       	ldd	r25, Y+54	; 0x36
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9e ab       	std	Y+54, r25	; 0x36
    220e:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	8d a9       	ldd	r24, Y+53	; 0x35
    2212:	9e a9       	ldd	r25, Y+54	; 0x36
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <LCD_displayCharacter+0x22a>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <LCD_displayCharacter+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6f a9       	ldd	r22, Y+55	; 0x37
    221c:	78 ad       	ldd	r23, Y+56	; 0x38
    221e:	89 ad       	ldd	r24, Y+57	; 0x39
    2220:	9a ad       	ldd	r25, Y+58	; 0x3a
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9e ab       	std	Y+54, r25	; 0x36
    222c:	8d ab       	std	Y+53, r24	; 0x35
    222e:	8d a9       	ldd	r24, Y+53	; 0x35
    2230:	9e a9       	ldd	r25, Y+54	; 0x36
    2232:	9a ab       	std	Y+50, r25	; 0x32
    2234:	89 ab       	std	Y+49, r24	; 0x31
    2236:	89 a9       	ldd	r24, Y+49	; 0x31
    2238:	9a a9       	ldd	r25, Y+50	; 0x32
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_displayCharacter+0x272>
    223e:	9a ab       	std	Y+50, r25	; 0x32
    2240:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);

#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    2242:	fe 01       	movw	r30, r28
    2244:	e3 5b       	subi	r30, 0xB3	; 179
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	60 81       	ld	r22, Z
    224c:	0e 94 39 0a 	call	0x1472	; 0x1472 <GPIO_writePort>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e8       	ldi	r26, 0x80	; 128
    2256:	bf e3       	ldi	r27, 0x3F	; 63
    2258:	8d a7       	std	Y+45, r24	; 0x2d
    225a:	9e a7       	std	Y+46, r25	; 0x2e
    225c:	af a7       	std	Y+47, r26	; 0x2f
    225e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2260:	6d a5       	ldd	r22, Y+45	; 0x2d
    2262:	7e a5       	ldd	r23, Y+46	; 0x2e
    2264:	8f a5       	ldd	r24, Y+47	; 0x2f
    2266:	98 a9       	ldd	r25, Y+48	; 0x30
    2268:	2b ea       	ldi	r18, 0xAB	; 171
    226a:	3a ea       	ldi	r19, 0xAA	; 170
    226c:	4a ea       	ldi	r20, 0xAA	; 170
    226e:	5e e3       	ldi	r21, 0x3E	; 62
    2270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	89 a7       	std	Y+41, r24	; 0x29
    227a:	9a a7       	std	Y+42, r25	; 0x2a
    227c:	ab a7       	std	Y+43, r26	; 0x2b
    227e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2280:	69 a5       	ldd	r22, Y+41	; 0x29
    2282:	7a a5       	ldd	r23, Y+42	; 0x2a
    2284:	8b a5       	ldd	r24, Y+43	; 0x2b
    2286:	9c a5       	ldd	r25, Y+44	; 0x2c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	1c f4       	brge	.+6      	; 0x229e <LCD_displayCharacter+0x2d6>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	88 a7       	std	Y+40, r24	; 0x28
    229c:	91 c0       	rjmp	.+290    	; 0x23c0 <LCD_displayCharacter+0x3f8>
	else if (__tmp > 255)
    229e:	69 a5       	ldd	r22, Y+41	; 0x29
    22a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    22a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	53 e4       	ldi	r21, 0x43	; 67
    22ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <LCD_displayCharacter+0x2f0>
    22b6:	7b c0       	rjmp	.+246    	; 0x23ae <LCD_displayCharacter+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    22b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    22ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	54 e4       	ldi	r21, 0x44	; 68
    22c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8c a3       	std	Y+36, r24	; 0x24
    22d2:	9d a3       	std	Y+37, r25	; 0x25
    22d4:	ae a3       	std	Y+38, r26	; 0x26
    22d6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6c a1       	ldd	r22, Y+36	; 0x24
    22da:	7d a1       	ldd	r23, Y+37	; 0x25
    22dc:	8e a1       	ldd	r24, Y+38	; 0x26
    22de:	9f a1       	ldd	r25, Y+39	; 0x27
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	53 e4       	ldi	r21, 0x43	; 67
    22e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	88 a3       	std	Y+32, r24	; 0x20
    22f2:	99 a3       	std	Y+33, r25	; 0x21
    22f4:	aa a3       	std	Y+34, r26	; 0x22
    22f6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22f8:	68 a1       	ldd	r22, Y+32	; 0x20
    22fa:	79 a1       	ldd	r23, Y+33	; 0x21
    22fc:	8a a1       	ldd	r24, Y+34	; 0x22
    22fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <LCD_displayCharacter+0x352>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9f 8f       	std	Y+31, r25	; 0x1f
    2316:	8e 8f       	std	Y+30, r24	; 0x1e
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <LCD_displayCharacter+0x3d0>
	else if (__tmp > 65535)
    231a:	68 a1       	ldd	r22, Y+32	; 0x20
    231c:	79 a1       	ldd	r23, Y+33	; 0x21
    231e:	8a a1       	ldd	r24, Y+34	; 0x22
    2320:	9b a1       	ldd	r25, Y+35	; 0x23
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <LCD_displayCharacter+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6c a1       	ldd	r22, Y+36	; 0x24
    2334:	7d a1       	ldd	r23, Y+37	; 0x25
    2336:	8e a1       	ldd	r24, Y+38	; 0x26
    2338:	9f a1       	ldd	r25, Y+39	; 0x27
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9f 8f       	std	Y+31, r25	; 0x1f
    2358:	8e 8f       	std	Y+30, r24	; 0x1e
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_displayCharacter+0x3b2>
    235c:	89 e1       	ldi	r24, 0x19	; 25
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9d 8f       	std	Y+29, r25	; 0x1d
    2362:	8c 8f       	std	Y+28, r24	; 0x1c
    2364:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2366:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_displayCharacter+0x3a0>
    236c:	9d 8f       	std	Y+29, r25	; 0x1d
    236e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2372:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9f 8f       	std	Y+31, r25	; 0x1f
    2378:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    237c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <LCD_displayCharacter+0x394>
    2382:	24 c0       	rjmp	.+72     	; 0x23cc <LCD_displayCharacter+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	68 a1       	ldd	r22, Y+32	; 0x20
    2386:	79 a1       	ldd	r23, Y+33	; 0x21
    2388:	8a a1       	ldd	r24, Y+34	; 0x22
    238a:	9b a1       	ldd	r25, Y+35	; 0x23
    238c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9f 8f       	std	Y+31, r25	; 0x1f
    2396:	8e 8f       	std	Y+30, r24	; 0x1e
    2398:	8e 8d       	ldd	r24, Y+30	; 0x1e
    239a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    239c:	9b 8f       	std	Y+27, r25	; 0x1b
    239e:	8a 8f       	std	Y+26, r24	; 0x1a
    23a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_displayCharacter+0x3dc>
    23a8:	9b 8f       	std	Y+27, r25	; 0x1b
    23aa:	8a 8f       	std	Y+26, r24	; 0x1a
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <LCD_displayCharacter+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ae:	69 a5       	ldd	r22, Y+41	; 0x29
    23b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    23b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	88 a7       	std	Y+40, r24	; 0x28
    23c0:	88 a5       	ldd	r24, Y+40	; 0x28
    23c2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23c4:	89 8d       	ldd	r24, Y+25	; 0x19
    23c6:	8a 95       	dec	r24
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_displayCharacter+0x3fe>
    23ca:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    23cc:	83 e0       	ldi	r24, 0x03	; 3
    23ce:	62 e0       	ldi	r22, 0x02	; 2
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 46 09 	call	0x128c	; 0x128c <GPIO_writePin>
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 e8       	ldi	r26, 0x80	; 128
    23dc:	bf e3       	ldi	r27, 0x3F	; 63
    23de:	8d 8b       	std	Y+21, r24	; 0x15
    23e0:	9e 8b       	std	Y+22, r25	; 0x16
    23e2:	af 8b       	std	Y+23, r26	; 0x17
    23e4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23e6:	6d 89       	ldd	r22, Y+21	; 0x15
    23e8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ea:	8f 89       	ldd	r24, Y+23	; 0x17
    23ec:	98 8d       	ldd	r25, Y+24	; 0x18
    23ee:	2b ea       	ldi	r18, 0xAB	; 171
    23f0:	3a ea       	ldi	r19, 0xAA	; 170
    23f2:	4a ea       	ldi	r20, 0xAA	; 170
    23f4:	5e e3       	ldi	r21, 0x3E	; 62
    23f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	89 8b       	std	Y+17, r24	; 0x11
    2400:	9a 8b       	std	Y+18, r25	; 0x12
    2402:	ab 8b       	std	Y+19, r26	; 0x13
    2404:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2406:	69 89       	ldd	r22, Y+17	; 0x11
    2408:	7a 89       	ldd	r23, Y+18	; 0x12
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    241a:	88 23       	and	r24, r24
    241c:	1c f4       	brge	.+6      	; 0x2424 <LCD_displayCharacter+0x45c>
		__ticks = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	88 8b       	std	Y+16, r24	; 0x10
    2422:	91 c0       	rjmp	.+290    	; 0x2546 <LCD_displayCharacter+0x57e>
	else if (__tmp > 255)
    2424:	69 89       	ldd	r22, Y+17	; 0x11
    2426:	7a 89       	ldd	r23, Y+18	; 0x12
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	53 e4       	ldi	r21, 0x43	; 67
    2434:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	0c f0       	brlt	.+2      	; 0x243e <LCD_displayCharacter+0x476>
    243c:	7b c0       	rjmp	.+246    	; 0x2534 <LCD_displayCharacter+0x56c>
	{
		_delay_ms(__us / 1000.0);
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a e7       	ldi	r20, 0x7A	; 122
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8c 87       	std	Y+12, r24	; 0x0c
    2458:	9d 87       	std	Y+13, r25	; 0x0d
    245a:	ae 87       	std	Y+14, r26	; 0x0e
    245c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2460:	7d 85       	ldd	r23, Y+13	; 0x0d
    2462:	8e 85       	ldd	r24, Y+14	; 0x0e
    2464:	9f 85       	ldd	r25, Y+15	; 0x0f
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a e7       	ldi	r20, 0x7A	; 122
    246c:	53 e4       	ldi	r21, 0x43	; 67
    246e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	88 87       	std	Y+8, r24	; 0x08
    2478:	99 87       	std	Y+9, r25	; 0x09
    247a:	aa 87       	std	Y+10, r26	; 0x0a
    247c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    247e:	68 85       	ldd	r22, Y+8	; 0x08
    2480:	79 85       	ldd	r23, Y+9	; 0x09
    2482:	8a 85       	ldd	r24, Y+10	; 0x0a
    2484:	9b 85       	ldd	r25, Y+11	; 0x0b
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <LCD_displayCharacter+0x4d8>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9f 83       	std	Y+7, r25	; 0x07
    249c:	8e 83       	std	Y+6, r24	; 0x06
    249e:	3f c0       	rjmp	.+126    	; 0x251e <LCD_displayCharacter+0x556>
	else if (__tmp > 65535)
    24a0:	68 85       	ldd	r22, Y+8	; 0x08
    24a2:	79 85       	ldd	r23, Y+9	; 0x09
    24a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <LCD_displayCharacter+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    24ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    24bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24be:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	8e 83       	std	Y+6, r24	; 0x06
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <LCD_displayCharacter+0x538>
    24e2:	89 e1       	ldi	r24, 0x19	; 25
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9d 83       	std	Y+5, r25	; 0x05
    24e8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ea:	8c 81       	ldd	r24, Y+4	; 0x04
    24ec:	9d 81       	ldd	r25, Y+5	; 0x05
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_displayCharacter+0x526>
    24f2:	9d 83       	std	Y+5, r25	; 0x05
    24f4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9f 83       	std	Y+7, r25	; 0x07
    24fe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	9f 81       	ldd	r25, Y+7	; 0x07
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <LCD_displayCharacter+0x51a>
    2508:	24 c0       	rjmp	.+72     	; 0x2552 <LCD_displayCharacter+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	68 85       	ldd	r22, Y+8	; 0x08
    250c:	79 85       	ldd	r23, Y+9	; 0x09
    250e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2510:	9b 85       	ldd	r25, Y+11	; 0x0b
    2512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9f 83       	std	Y+7, r25	; 0x07
    251c:	8e 83       	std	Y+6, r24	; 0x06
    251e:	8e 81       	ldd	r24, Y+6	; 0x06
    2520:	9f 81       	ldd	r25, Y+7	; 0x07
    2522:	9b 83       	std	Y+3, r25	; 0x03
    2524:	8a 83       	std	Y+2, r24	; 0x02
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	9b 81       	ldd	r25, Y+3	; 0x03
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_displayCharacter+0x562>
    252e:	9b 83       	std	Y+3, r25	; 0x03
    2530:	8a 83       	std	Y+2, r24	; 0x02
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <LCD_displayCharacter+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2534:	69 89       	ldd	r22, Y+17	; 0x11
    2536:	7a 89       	ldd	r23, Y+18	; 0x12
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	88 8b       	std	Y+16, r24	; 0x10
    2546:	88 89       	ldd	r24, Y+16	; 0x10
    2548:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	8a 95       	dec	r24
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_displayCharacter+0x584>
    2550:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2552:	c3 5b       	subi	r28, 0xB3	; 179
    2554:	df 4f       	sbci	r29, 0xFF	; 255
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <LCD_displayString+0x6>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    257a:	19 82       	std	Y+1, r1	; 0x01
    257c:	0e c0       	rjmp	.+28     	; 0x259a <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	fc 01       	movw	r30, r24
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	80 81       	ld	r24, Z
    2590:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	fc 01       	movw	r30, r24
    25a6:	e2 0f       	add	r30, r18
    25a8:	f3 1f       	adc	r31, r19
    25aa:	80 81       	ld	r24, Z
    25ac:	88 23       	and	r24, r24
    25ae:	39 f7       	brne	.-50     	; 0x257e <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	62 97       	sbiw	r28, 0x12	; 18
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	9a 8b       	std	Y+18, r25	; 0x12
    25d2:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    25d4:	89 89       	ldd	r24, Y+17	; 0x11
    25d6:	9a 89       	ldd	r25, Y+18	; 0x12
    25d8:	9e 01       	movw	r18, r28
    25da:	2f 5f       	subi	r18, 0xFF	; 255
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	b9 01       	movw	r22, r18
    25e0:	4a e0       	ldi	r20, 0x0A	; 10
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <itoa>

   LCD_displayString(arr);
    25e8:	ce 01       	movw	r24, r28
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
}
    25f0:	62 96       	adiw	r28, 0x12	; 18
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <LCD_moveCursor+0x6>
    2608:	00 d0       	rcall	.+0      	; 0x260a <LCD_moveCursor+0x8>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	3d 83       	std	Y+5, r19	; 0x05
    261c:	2c 83       	std	Y+4, r18	; 0x04
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	9d 81       	ldd	r25, Y+5	; 0x05
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	91 05       	cpc	r25, r1
    2626:	c1 f0       	breq	.+48     	; 0x2658 <LCD_moveCursor+0x56>
    2628:	2c 81       	ldd	r18, Y+4	; 0x04
    262a:	3d 81       	ldd	r19, Y+5	; 0x05
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	2c f4       	brge	.+10     	; 0x263c <LCD_moveCursor+0x3a>
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	9d 81       	ldd	r25, Y+5	; 0x05
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	61 f0       	breq	.+24     	; 0x2652 <LCD_moveCursor+0x50>
    263a:	19 c0       	rjmp	.+50     	; 0x266e <LCD_moveCursor+0x6c>
    263c:	2c 81       	ldd	r18, Y+4	; 0x04
    263e:	3d 81       	ldd	r19, Y+5	; 0x05
    2640:	22 30       	cpi	r18, 0x02	; 2
    2642:	31 05       	cpc	r19, r1
    2644:	69 f0       	breq	.+26     	; 0x2660 <LCD_moveCursor+0x5e>
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	9d 81       	ldd	r25, Y+5	; 0x05
    264a:	83 30       	cpi	r24, 0x03	; 3
    264c:	91 05       	cpc	r25, r1
    264e:	61 f0       	breq	.+24     	; 0x2668 <LCD_moveCursor+0x66>
    2650:	0e c0       	rjmp	.+28     	; 0x266e <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	0b c0       	rjmp	.+22     	; 0x266e <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	80 5c       	subi	r24, 0xC0	; 192
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	07 c0       	rjmp	.+14     	; 0x266e <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	80 5f       	subi	r24, 0xF0	; 240
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	03 c0       	rjmp	.+6      	; 0x266e <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	80 5c       	subi	r24, 0xC0	; 192
    266c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	80 68       	ori	r24, 0x80	; 128
    2672:	0e 94 2f 0c 	call	0x185e	; 0x185e <LCD_sendCommand>
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <LCD_displayStringRowColumn+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <LCD_displayStringRowColumn+0x8>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	6a 83       	std	Y+2, r22	; 0x02
    2696:	5c 83       	std	Y+4, r21	; 0x04
    2698:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	6a 81       	ldd	r22, Y+2	; 0x02
    269e:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	0e 94 2f 0c 	call	0x185e	; 0x185e <LCD_sendCommand>
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LM35_getTemperature>:
/* Description :
 * A Function that read the digital value read from the sensor by ADC
 * and return the temperature value
 */
uint8 LM35_getTemperature(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <LM35_getTemperature+0x6>
    26d2:	0f 92       	push	r0
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature=0;
    26d8:	1b 82       	std	Y+3, r1	; 0x03
	uint16 digitalValue=0;
    26da:	1a 82       	std	Y+2, r1	; 0x02
    26dc:	19 82       	std	Y+1, r1	; 0x01

	/*get the digital value from ADC*/
	digitalValue = ADC_readChannel(LM35_OUTPUT_PIN);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	0e 94 f5 07 	call	0xfea	; 0xfea <ADC_readChannel>
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01

	/*calculate the temperature */
	temperature=(uint8)(((uint32)digitalValue*LM35_MAX_TEMPERATURE*ADC_Vref)/(ADC_MAX_DIGITAL_VALUE*LM35_MAX_VOLT));
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	cc 01       	movw	r24, r24
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	26 e9       	ldi	r18, 0x96	; 150
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 c1 14 	call	0x2982	; 0x2982 <__mulsi3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	2a e0       	ldi	r18, 0x0A	; 10
    2718:	37 ed       	ldi	r19, 0xD7	; 215
    271a:	43 e2       	ldi	r20, 0x23	; 35
    271c:	50 e4       	ldi	r21, 0x40	; 64
    271e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 ed       	ldi	r19, 0xD0	; 208
    272e:	4f eb       	ldi	r20, 0xBF	; 191
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	8b 83       	std	Y+3, r24	; 0x03

	/*return the temperature*/
	return temperature;
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <main>:
#include"adc.h"
#include"lm35_sensor.h"
#include"DC_motor.h"

int main(void)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <main+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <main+0x8>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <main+0xa>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
	/*initialize LCD module*/
	LCD_init();
    2764:	0e 94 21 0b 	call	0x1642	; 0x1642 <LCD_init>

	/*setup the configurations of ADC*/
	ADC_ConfigType configurations = {AREF_VOLTAGE_INTERNAL,PRESCALER_8};
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	8e 83       	std	Y+6, r24	; 0x06
	ADC_init(&configurations);
    2770:	ce 01       	movw	r24, r28
    2772:	05 96       	adiw	r24, 0x05	; 5
    2774:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ADC_init>

	/* Set I-Bit to enable interrupts*/
	SREG|=(1<<7);
    2778:	af e5       	ldi	r26, 0x5F	; 95
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ef e5       	ldi	r30, 0x5F	; 95
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 68       	ori	r24, 0x80	; 128
    2784:	8c 93       	st	X, r24

	/*The initial display of LCD*/
	LCD_displayString("FAN IS OFF");
    2786:	80 e6       	ldi	r24, 0x60	; 96
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
	LCD_moveCursor(1,0);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
	LCD_displayString("TEMP IS 0C");
    2796:	8b e6       	ldi	r24, 0x6B	; 107
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>

	/*Initialize DC motor*/
	DcMotor_Init();
    279e:	0e 94 6d 07 	call	0xeda	; 0xeda <DcMotor_Init>

	/* Variables to detect the change in temperature*/
	uint16 temperature_new=0,temperature_old=1;
    27a2:	1c 82       	std	Y+4, r1	; 0x04
    27a4:	1b 82       	std	Y+3, r1	; 0x03
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		/* get the sensor reading*/
		temperature_new=LM35_getTemperature();
    27ae:	0e 94 66 13 	call	0x26cc	; 0x26cc <LM35_getTemperature>
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03

		/*check if the reading is changed or not*/
		if(temperature_new != temperature_old)
    27ba:	2b 81       	ldd	r18, Y+3	; 0x03
    27bc:	3c 81       	ldd	r19, Y+4	; 0x04
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	99 f3       	breq	.-26     	; 0x27ae <main+0x58>
		{
			/*The fan is off*/
			if(temperature_new<30)
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	8e 31       	cpi	r24, 0x1E	; 30
    27ce:	91 05       	cpc	r25, r1
    27d0:	18 f5       	brcc	.+70     	; 0x2818 <main+0xc2>
			{
				/*Display the temperature reading and fan state off*/
				LCD_moveCursor(0,7);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	67 e0       	ldi	r22, 0x07	; 7
    27d6:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_displayString("OFF");
    27da:	86 e7       	ldi	r24, 0x76	; 118
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
				LCD_moveCursor(1,8);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	68 e0       	ldi	r22, 0x08	; 8
    27e6:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_integerToString((uint32)temperature_new);
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	0e 94 de 12 	call	0x25bc	; 0x25bc <LCD_integerToString>

				/*Adjust the fan speed to 0*/
				DcMotor_Rotate(2,0);
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotor_Rotate>

				/*adjust the displayed value on screen*/
				if(temperature_new<10)
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	8a 30       	cpi	r24, 0x0A	; 10
    2800:	91 05       	cpc	r25, r1
    2802:	28 f4       	brcc	.+10     	; 0x280e <main+0xb8>
					LCD_displayString("  C");
    2804:	8a e7       	ldi	r24, 0x7A	; 122
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    280c:	99 c0       	rjmp	.+306    	; 0x2940 <main+0x1ea>
				else
					LCD_displayString(" C");
    280e:	8e e7       	ldi	r24, 0x7E	; 126
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    2816:	94 c0       	rjmp	.+296    	; 0x2940 <main+0x1ea>
			}

			else if(temperature_new>=30 && temperature_new<60)
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	8e 31       	cpi	r24, 0x1E	; 30
    281e:	91 05       	cpc	r25, r1
    2820:	f0 f0       	brcs	.+60     	; 0x285e <main+0x108>
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	8c 33       	cpi	r24, 0x3C	; 60
    2828:	91 05       	cpc	r25, r1
    282a:	c8 f4       	brcc	.+50     	; 0x285e <main+0x108>
			{
				/*Display the temperature reading and fan state on*/
				LCD_moveCursor(0,7);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	67 e0       	ldi	r22, 0x07	; 7
    2830:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_displayString("ON ");
    2834:	81 e8       	ldi	r24, 0x81	; 129
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
				LCD_moveCursor(1,8);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	68 e0       	ldi	r22, 0x08	; 8
    2840:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_integerToString((uint32)temperature_new);
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	0e 94 de 12 	call	0x25bc	; 0x25bc <LCD_integerToString>

				/*Adjust the fan speed to 25%*/
				DcMotor_Rotate(1,25);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	69 e1       	ldi	r22, 0x19	; 25
    2850:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotor_Rotate>

				LCD_displayString(" C");
    2854:	8e e7       	ldi	r24, 0x7E	; 126
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    285c:	71 c0       	rjmp	.+226    	; 0x2940 <main+0x1ea>
			}

			else if(temperature_new>=60 && temperature_new<90)
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	8c 33       	cpi	r24, 0x3C	; 60
    2864:	91 05       	cpc	r25, r1
    2866:	10 f1       	brcs	.+68     	; 0x28ac <main+0x156>
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	8a 35       	cpi	r24, 0x5A	; 90
    286e:	91 05       	cpc	r25, r1
    2870:	e8 f4       	brcc	.+58     	; 0x28ac <main+0x156>
			{
				/*Display the temperature reading and fan state on*/
				LCD_moveCursor(0,7);
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	67 e0       	ldi	r22, 0x07	; 7
    2876:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_moveCursor(0,7);
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	67 e0       	ldi	r22, 0x07	; 7
    287e:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_displayString("ON ");
    2882:	81 e8       	ldi	r24, 0x81	; 129
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
				LCD_moveCursor(1,8);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	68 e0       	ldi	r22, 0x08	; 8
    288e:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_integerToString((uint32)temperature_new);
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	0e 94 de 12 	call	0x25bc	; 0x25bc <LCD_integerToString>

				/*Adjust the fan speed to 50%*/
				DcMotor_Rotate(2,50);
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	62 e3       	ldi	r22, 0x32	; 50
    289e:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotor_Rotate>
				LCD_displayString(" C");
    28a2:	8e e7       	ldi	r24, 0x7E	; 126
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    28aa:	4a c0       	rjmp	.+148    	; 0x2940 <main+0x1ea>
			}

			else if(temperature_new>=90 && temperature_new<120)
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	8a 35       	cpi	r24, 0x5A	; 90
    28b2:	91 05       	cpc	r25, r1
    28b4:	40 f1       	brcs	.+80     	; 0x2906 <main+0x1b0>
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	88 37       	cpi	r24, 0x78	; 120
    28bc:	91 05       	cpc	r25, r1
    28be:	18 f5       	brcc	.+70     	; 0x2906 <main+0x1b0>
			{
				/*Display the temperature reading and fan state on*/
				LCD_moveCursor(0,7);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_displayString("ON ");
    28c8:	81 e8       	ldi	r24, 0x81	; 129
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
				LCD_moveCursor(1,8);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	68 e0       	ldi	r22, 0x08	; 8
    28d4:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_integerToString((uint32)temperature_new);
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	0e 94 de 12 	call	0x25bc	; 0x25bc <LCD_integerToString>

				/*Adjust the fan speed to 75%*/
				DcMotor_Rotate(1,75);
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	6b e4       	ldi	r22, 0x4B	; 75
    28e4:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotor_Rotate>

				/*adjust the displayed value on screen*/
				if(temperature_new>99)
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	84 36       	cpi	r24, 0x64	; 100
    28ee:	91 05       	cpc	r25, r1
    28f0:	28 f0       	brcs	.+10     	; 0x28fc <main+0x1a6>
					LCD_displayString("C");
    28f2:	85 e8       	ldi	r24, 0x85	; 133
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    28fa:	22 c0       	rjmp	.+68     	; 0x2940 <main+0x1ea>
				else
					LCD_displayString(" C");
    28fc:	8e e7       	ldi	r24, 0x7E	; 126
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
    2904:	1d c0       	rjmp	.+58     	; 0x2940 <main+0x1ea>
			}

			else if(temperature_new>=120)
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	88 37       	cpi	r24, 0x78	; 120
    290c:	91 05       	cpc	r25, r1
    290e:	c0 f0       	brcs	.+48     	; 0x2940 <main+0x1ea>
			{
				/*Display the temperature reading and fan state on*/
				LCD_moveCursor(0,7);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	67 e0       	ldi	r22, 0x07	; 7
    2914:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_displayString("ON ");
    2918:	81 e8       	ldi	r24, 0x81	; 129
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
				LCD_moveCursor(1,8);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	68 e0       	ldi	r22, 0x08	; 8
    2924:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_moveCursor>
				LCD_integerToString((uint32)temperature_new);
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	0e 94 de 12 	call	0x25bc	; 0x25bc <LCD_integerToString>

				/*Adjust the fan speed to 100%*/
				DcMotor_Rotate(2,100);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	64 e6       	ldi	r22, 0x64	; 100
    2934:	0e 94 92 07 	call	0xf24	; 0xf24 <DcMotor_Rotate>

				LCD_displayString("C");
    2938:	85 e8       	ldi	r24, 0x85	; 133
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_displayString>
			}
			/*copy the new value to old one to re-compare:)*/
			temperature_old=temperature_new;
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	32 cf       	rjmp	.-412    	; 0x27ae <main+0x58>

0000294a <PWM_Timer0_Start>:
#include"pwm.h"
#include<avr/io.h>

void PWM_Timer0_Start(uint8 set_duty_cycle)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	0f 92       	push	r0
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	89 83       	std	Y+1, r24	; 0x01

	/*Initialize timer(optional)*/
	TCNT0 = 0;
    2956:	e2 e5       	ldi	r30, 0x52	; 82
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	10 82       	st	Z, r1

	/* Compare value*/
	OCR0  = set_duty_cycle;
    295c:	ec e5       	ldi	r30, 0x5C	; 92
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	80 83       	st	Z, r24

	/* PB3(OC0) is output where we will get the PWM signal*/
	DDRB  = DDRB | (1<<PB3);
    2964:	a7 e3       	ldi	r26, 0x37	; 55
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e7 e3       	ldi	r30, 0x37	; 55
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	88 60       	ori	r24, 0x08	; 8
    2970:	8c 93       	st	X, r24
	 * 1 - FOC0=0         : Fast PWM mode
	 * 2 - WGM 01:00=11   : Fast PWM Mode
	 * 3 - COM 01:00 = 10 : non inverted mode
	 * 4 - CS02:00 = 010  : Prescaler = 8
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2972:	e3 e5       	ldi	r30, 0x53	; 83
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	8a e6       	ldi	r24, 0x6A	; 106
    2978:	80 83       	st	Z, r24
}
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <__mulsi3>:
    2982:	62 9f       	mul	r22, r18
    2984:	d0 01       	movw	r26, r0
    2986:	73 9f       	mul	r23, r19
    2988:	f0 01       	movw	r30, r0
    298a:	82 9f       	mul	r24, r18
    298c:	e0 0d       	add	r30, r0
    298e:	f1 1d       	adc	r31, r1
    2990:	64 9f       	mul	r22, r20
    2992:	e0 0d       	add	r30, r0
    2994:	f1 1d       	adc	r31, r1
    2996:	92 9f       	mul	r25, r18
    2998:	f0 0d       	add	r31, r0
    299a:	83 9f       	mul	r24, r19
    299c:	f0 0d       	add	r31, r0
    299e:	74 9f       	mul	r23, r20
    29a0:	f0 0d       	add	r31, r0
    29a2:	65 9f       	mul	r22, r21
    29a4:	f0 0d       	add	r31, r0
    29a6:	99 27       	eor	r25, r25
    29a8:	72 9f       	mul	r23, r18
    29aa:	b0 0d       	add	r27, r0
    29ac:	e1 1d       	adc	r30, r1
    29ae:	f9 1f       	adc	r31, r25
    29b0:	63 9f       	mul	r22, r19
    29b2:	b0 0d       	add	r27, r0
    29b4:	e1 1d       	adc	r30, r1
    29b6:	f9 1f       	adc	r31, r25
    29b8:	bd 01       	movw	r22, r26
    29ba:	cf 01       	movw	r24, r30
    29bc:	11 24       	eor	r1, r1
    29be:	08 95       	ret

000029c0 <__prologue_saves__>:
    29c0:	2f 92       	push	r2
    29c2:	3f 92       	push	r3
    29c4:	4f 92       	push	r4
    29c6:	5f 92       	push	r5
    29c8:	6f 92       	push	r6
    29ca:	7f 92       	push	r7
    29cc:	8f 92       	push	r8
    29ce:	9f 92       	push	r9
    29d0:	af 92       	push	r10
    29d2:	bf 92       	push	r11
    29d4:	cf 92       	push	r12
    29d6:	df 92       	push	r13
    29d8:	ef 92       	push	r14
    29da:	ff 92       	push	r15
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	ca 1b       	sub	r28, r26
    29ea:	db 0b       	sbc	r29, r27
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	09 94       	ijmp

000029f8 <__epilogue_restores__>:
    29f8:	2a 88       	ldd	r2, Y+18	; 0x12
    29fa:	39 88       	ldd	r3, Y+17	; 0x11
    29fc:	48 88       	ldd	r4, Y+16	; 0x10
    29fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a0e:	df 80       	ldd	r13, Y+7	; 0x07
    2a10:	ee 80       	ldd	r14, Y+6	; 0x06
    2a12:	fd 80       	ldd	r15, Y+5	; 0x05
    2a14:	0c 81       	ldd	r16, Y+4	; 0x04
    2a16:	1b 81       	ldd	r17, Y+3	; 0x03
    2a18:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1c:	ce 0f       	add	r28, r30
    2a1e:	d1 1d       	adc	r29, r1
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	ed 01       	movw	r28, r26
    2a2c:	08 95       	ret

00002a2e <itoa>:
    2a2e:	fb 01       	movw	r30, r22
    2a30:	9f 01       	movw	r18, r30
    2a32:	e8 94       	clt
    2a34:	42 30       	cpi	r20, 0x02	; 2
    2a36:	c4 f0       	brlt	.+48     	; 0x2a68 <itoa+0x3a>
    2a38:	45 32       	cpi	r20, 0x25	; 37
    2a3a:	b4 f4       	brge	.+44     	; 0x2a68 <itoa+0x3a>
    2a3c:	4a 30       	cpi	r20, 0x0A	; 10
    2a3e:	29 f4       	brne	.+10     	; 0x2a4a <itoa+0x1c>
    2a40:	97 fb       	bst	r25, 7
    2a42:	1e f4       	brtc	.+6      	; 0x2a4a <itoa+0x1c>
    2a44:	90 95       	com	r25
    2a46:	81 95       	neg	r24
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	64 2f       	mov	r22, r20
    2a4c:	77 27       	eor	r23, r23
    2a4e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__udivmodhi4>
    2a52:	80 5d       	subi	r24, 0xD0	; 208
    2a54:	8a 33       	cpi	r24, 0x3A	; 58
    2a56:	0c f0       	brlt	.+2      	; 0x2a5a <itoa+0x2c>
    2a58:	89 5d       	subi	r24, 0xD9	; 217
    2a5a:	81 93       	st	Z+, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	a1 f7       	brne	.-24     	; 0x2a4a <itoa+0x1c>
    2a62:	16 f4       	brtc	.+4      	; 0x2a68 <itoa+0x3a>
    2a64:	5d e2       	ldi	r21, 0x2D	; 45
    2a66:	51 93       	st	Z+, r21
    2a68:	10 82       	st	Z, r1
    2a6a:	c9 01       	movw	r24, r18
    2a6c:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <strrev>

00002a70 <strrev>:
    2a70:	dc 01       	movw	r26, r24
    2a72:	fc 01       	movw	r30, r24
    2a74:	67 2f       	mov	r22, r23
    2a76:	71 91       	ld	r23, Z+
    2a78:	77 23       	and	r23, r23
    2a7a:	e1 f7       	brne	.-8      	; 0x2a74 <strrev+0x4>
    2a7c:	32 97       	sbiw	r30, 0x02	; 2
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <strrev+0x18>
    2a80:	7c 91       	ld	r23, X
    2a82:	6d 93       	st	X+, r22
    2a84:	70 83       	st	Z, r23
    2a86:	62 91       	ld	r22, -Z
    2a88:	ae 17       	cp	r26, r30
    2a8a:	bf 07       	cpc	r27, r31
    2a8c:	c8 f3       	brcs	.-14     	; 0x2a80 <strrev+0x10>
    2a8e:	08 95       	ret

00002a90 <__udivmodhi4>:
    2a90:	aa 1b       	sub	r26, r26
    2a92:	bb 1b       	sub	r27, r27
    2a94:	51 e1       	ldi	r21, 0x11	; 17
    2a96:	07 c0       	rjmp	.+14     	; 0x2aa6 <__udivmodhi4_ep>

00002a98 <__udivmodhi4_loop>:
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	a6 17       	cp	r26, r22
    2a9e:	b7 07       	cpc	r27, r23
    2aa0:	10 f0       	brcs	.+4      	; 0x2aa6 <__udivmodhi4_ep>
    2aa2:	a6 1b       	sub	r26, r22
    2aa4:	b7 0b       	sbc	r27, r23

00002aa6 <__udivmodhi4_ep>:
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	5a 95       	dec	r21
    2aac:	a9 f7       	brne	.-22     	; 0x2a98 <__udivmodhi4_loop>
    2aae:	80 95       	com	r24
    2ab0:	90 95       	com	r25
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	08 95       	ret

00002ab8 <_exit>:
    2ab8:	f8 94       	cli

00002aba <__stop_program>:
    2aba:	ff cf       	rjmp	.-2      	; 0x2aba <__stop_program>
